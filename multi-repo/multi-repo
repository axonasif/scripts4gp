#!/usr/bin/env bash
main@bashbox%13455 () 
{ 
    function process::self::exit () 
    { 
        local _r=$?;
        kill -USR1 "$___self_PID";
        exit $_r
    };
    function process::self::forcekill () 
    { 
        exec 2> /dev/null;
        kill -9 "$___self_PID"
    };
    function log::error () 
    { 
        local _retcode="${2:-$?}";
        local _exception_line="$1";
        local _source="${BB_ERR_SOURCE:-"${BASH_SOURCE[-1]}"}";
        if [[ ! "$_exception_line" == "("*")" ]]; then
            { 
                echo -e "[!!!] \033[1;31merror\033[0m[$_retcode]: ${_source##*/}[$BASH_LINENO]: ${BB_ERR_MSG:-"$_exception_line"}" 1>&2;
                if test -v BB_ERR_MSG; then
                    { 
                        echo -e "STACK TRACE: (TOKEN: $_exception_line)" 1>&2;
                        local -i _frame=0;
                        local _treestack='|--';
                        local _line _caller _source;
                        while read -r _line _caller _source < <(caller "$_frame"); do
                            { 
                                echo "$_treestack ${_caller} >> ${_source##*/}::${_line}" 1>&2;
                                _frame+=1;
                                _treestack+='--'
                            };
                        done
                    };
                fi
            };
        else
            { 
                echo -e "[!!!] \033[1;31merror\033[0m[$_retcode]: ${_source##*/}[$BASH_LINENO]: SUBSHELL EXITED WITH NON-ZERO STATUS" 1>&2
            };
        fi;
        return "$_retcode"
    };
    \command \unalias -a || exit;
    trap 'exit' USR1;
    trap 'BB_ERR_MSG="UNCAUGHT EXCEPTION" log::error "$BASH_COMMAND" || process::self::exit' ERR;
    set -eEuT -o pipefail;
    shopt -s inherit_errexit expand_aliases;
    ___self="$0";
    ___self_PID="$$";
    ___MAIN_FUNCNAME="main@bashbox%13455";
    ___self_NAME="multi-repo";
    ___self_CODENAME="multi-repo";
    ___self_AUTHORS=("AXON <axonasif@gmail.com>");
    ___self_VERSION="1.0";
    ___self_DEPENDENCIES=(std::0.2.0);
    ___self_REPOSITORY="";
    ___self_BASHBOX_COMPAT="0.3.7~";
    function bashbox_after_build () 
    { 
        cp "$_target_workfile" "$_arg_path/$CODENAME";
        chmod +x "$_arg_path/$CODENAME"
    };
    function log::info () 
    { 
        echo -e "[%%%] \033[1;37minfo\033[0m: $@"
    };
    function log::warn () 
    { 
        echo -e "[***] \033[1;37mwarn\033[0m: $@"
    };
    function main () 
    { 
        local _multi_repo_list=("${@}");
        local _repos_name='repos';
        local _gitmodules_name='.gitmodules';
        local _gitignore_name='.gitignore';
        local _base_dir="$PWD";
        local _hook_script="$HOME/.bashrc.d/multi-repo";
        local _repo _task;
        for _repo in "${_multi_repo_list[@]}";
        do
            { 
                IFS='+' read -r _repo _task <<< "${_repo%.git}" && : "${_task:="none"}";
                local _repo_name="${_repo##*/}" && _repo_name="${_repo_name}";
                local _repo_dir="$_base_dir/$_repos_name/$_repo_name";
                ( log::info "Setting up $_repo ...";
                git clone --depth=1 "$_repo" "$_repo_dir" && { 
                    if test "$_task" != "base"; then
                        { 
                            printf '%s\n' "[submodule \"${_repo_name}\"]" "	path = ${_repos_name}/${_repo_name}" "	url = ${_repo}.git" >> "$_base_dir/${_gitmodules_name}"
                        };
                    fi
                };
                if test "$_task" == "open"; then
                    { 
                        log::info "Hooking $_repo_name in a separate VSCODE instance";
                        printf '%s\n' "code $_repo_dir" >> "$_hook_script"
                    };
                else
                    if test "$_task" == "base"; then
                        { 
                            log::info "Using $_repo_name as base repository";
                            rm -rf "$_base_dir/.git" && mv "$_repo_dir/.git" "$_base_dir/";
                            git -C "$_base_dir" reset --hard;
                            rm -rf "$_repo_dir"
                        };
                    fi;
                fi ) &
            };
        done;
        wait;
        if test -e "$_hook_script"; then
            { 
                printf '%s\n' "rm $_hook_script" >> "$_hook_script"
            };
        fi;
        printf '%s\n' "/${_repos_name}/" "/${_gitmodules_name}" >> "$_base_dir/${_gitignore_name}"
    };
    main "$@";
    exit
}
main@bashbox%13455 "$@";
